// Package frontendapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package frontendapi

import (
	"fmt"
	"net/http"

	"github.com/gorilla/mux"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Company defines model for company.
type Company struct {
	Id   int    `json:"id"`
	Name string `json:"name"`
}

// Department defines model for department.
type Department struct {
	Departments      *[]Department `json:"departments,omitempty"`
	Employees        []Employee    `json:"employees"`
	Id               int           `json:"id"`
	Name             string        `json:"name"`
	ParentDepartment *struct {
		Id   int    `json:"id"`
		Name string `json:"name"`
	} `json:"parentDepartment,omitempty"`
	Supervisor *struct {
		Id   int    `json:"id"`
		Name string `json:"name"`
	} `json:"supervisor,omitempty"`
}

// DepartmentInfo defines model for departmentInfo.
type DepartmentInfo struct {
	Id   int    `json:"id"`
	Name string `json:"name"`
}

// DepartmentRequest defines model for departmentRequest.
type DepartmentRequest struct {
	EmployeeIDs        []int  `json:"employeeIDs"`
	Name               string `json:"name"`
	ParentDepartmentID *int   `json:"parentDepartmentID,omitempty"`
	Supervisor         *struct {
		Id   int    `json:"id"`
		Name string `json:"name"`
	} `json:"supervisor,omitempty"`
}

// DepartmentWithEmployees defines model for departmentWithEmployees.
type DepartmentWithEmployees struct {
	Departments []DepartmentWithEmployees `json:"departments"`
	Employees   []Employee                `json:"employees"`
	Id          int                       `json:"id"`
	Name        string                    `json:"name"`
}

// Departments defines model for departments.
type Departments struct {
	CountOfEmployees int            `json:"countOfEmployees"`
	Departments      *[]Departments `json:"departments,omitempty"`
	Id               int            `json:"id"`
	Name             string         `json:"name"`
}

// Employee defines model for employee.
type Employee struct {
	DateOfBirth     openapi_types.Date `json:"dateOfBirth"`
	Email           string             `json:"email"`
	FirstName       string             `json:"firstName"`
	Icon            string             `json:"icon"`
	Id              int                `json:"id"`
	SecondName      string             `json:"secondName"`
	Surname         string             `json:"surname"`
	TelephoneNumber string             `json:"telephoneNumber"`
}

// EmployeeRequest defines model for employeeRequest.
type EmployeeRequest struct {
	DateOfBirth  openapi_types.Date `json:"dateOfBirth"`
	DepartmentID *int               `json:"departmentID,omitempty"`
	Email        string             `json:"email"`
	FirstName    string             `json:"firstName"`
	Icon         string             `json:"icon"`
	RoleIDs      []int              `json:"roleIDs"`
	SecondName   string             `json:"secondName"`

	// Surname Отчество
	Surname         string `json:"surname"`
	TelephoneNumber string `json:"telephoneNumber"`
}

// EmployeeWithConnections defines model for employeeWithConnections.
type EmployeeWithConnections struct {
	Company         Company            `json:"company"`
	DateOfBirth     openapi_types.Date `json:"dateOfBirth"`
	Departments     []DepartmentInfo   `json:"departments"`
	Email           string             `json:"email"`
	FirstName       string             `json:"firstName"`
	Icon            string             `json:"icon"`
	Id              int                `json:"id"`
	Roles           []RoleInfo         `json:"roles"`
	SecondName      string             `json:"secondName"`
	Surname         string             `json:"surname"`
	TelephoneNumber string             `json:"telephoneNumber"`
}

// MoveEmployeesRequest defines model for moveEmployeesRequest.
type MoveEmployeesRequest struct {
	DepartmentToID *int `json:"DepartmentToID,omitempty"`
	Employees      []struct {
		DepartmentFromID *int `json:"DepartmentFromID,omitempty"`
		EmployeeID       *int `json:"EmployeeID,omitempty"`
	} `json:"employees"`
}

// RoleInfo defines model for roleInfo.
type RoleInfo struct {
	Id   int    `json:"id"`
	Name string `json:"name"`
}

// CreateDepartmentJSONRequestBody defines body for CreateDepartment for application/json ContentType.
type CreateDepartmentJSONRequestBody = DepartmentRequest

// EditDepartmentJSONRequestBody defines body for EditDepartment for application/json ContentType.
type EditDepartmentJSONRequestBody = DepartmentRequest

// CreateEmployeeJSONRequestBody defines body for CreateEmployee for application/json ContentType.
type CreateEmployeeJSONRequestBody = EmployeeRequest

// MoveEmployeesToDepartmentJSONRequestBody defines body for MoveEmployeesToDepartment for application/json ContentType.
type MoveEmployeesToDepartmentJSONRequestBody = MoveEmployeesRequest

// EditEmployeeJSONRequestBody defines body for EditEmployee for application/json ContentType.
type EditEmployeeJSONRequestBody = EmployeeRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /department/all)
	GetDepartments(w http.ResponseWriter, r *http.Request)

	// (POST /department/create)
	CreateDepartment(w http.ResponseWriter, r *http.Request)

	// (GET /department/{departmentID})
	GetDepartment(w http.ResponseWriter, r *http.Request, departmentID int)

	// (DELETE /department/{departmentID}/delete)
	DeleteDepartment(w http.ResponseWriter, r *http.Request, departmentID int)

	// (POST /department/{departmentID}/edit)
	EditDepartment(w http.ResponseWriter, r *http.Request, departmentID int)

	// (GET /employee/all)
	GetEmployees(w http.ResponseWriter, r *http.Request)

	// (POST /employee/create)
	CreateEmployee(w http.ResponseWriter, r *http.Request)

	// (POST /employee/moveToDepartment)
	MoveEmployeesToDepartment(w http.ResponseWriter, r *http.Request)

	// (GET /employee/{employeeID})
	GetEmployee(w http.ResponseWriter, r *http.Request, employeeID int)

	// (DELETE /employee/{employeeID}/delete)
	DeleteEmployee(w http.ResponseWriter, r *http.Request, employeeID int)

	// (POST /employee/{employeeID}/edit)
	EditEmployee(w http.ResponseWriter, r *http.Request, employeeID int)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetDepartments operation middleware
func (siw *ServerInterfaceWrapper) GetDepartments(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDepartments(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateDepartment operation middleware
func (siw *ServerInterfaceWrapper) CreateDepartment(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateDepartment(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetDepartment operation middleware
func (siw *ServerInterfaceWrapper) GetDepartment(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "departmentID" -------------
	var departmentID int

	err = runtime.BindStyledParameter("simple", false, "departmentID", mux.Vars(r)["departmentID"], &departmentID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "departmentID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDepartment(w, r, departmentID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteDepartment operation middleware
func (siw *ServerInterfaceWrapper) DeleteDepartment(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "departmentID" -------------
	var departmentID int

	err = runtime.BindStyledParameter("simple", false, "departmentID", mux.Vars(r)["departmentID"], &departmentID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "departmentID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteDepartment(w, r, departmentID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// EditDepartment operation middleware
func (siw *ServerInterfaceWrapper) EditDepartment(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "departmentID" -------------
	var departmentID int

	err = runtime.BindStyledParameter("simple", false, "departmentID", mux.Vars(r)["departmentID"], &departmentID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "departmentID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.EditDepartment(w, r, departmentID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetEmployees operation middleware
func (siw *ServerInterfaceWrapper) GetEmployees(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetEmployees(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateEmployee operation middleware
func (siw *ServerInterfaceWrapper) CreateEmployee(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateEmployee(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// MoveEmployeesToDepartment operation middleware
func (siw *ServerInterfaceWrapper) MoveEmployeesToDepartment(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.MoveEmployeesToDepartment(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetEmployee operation middleware
func (siw *ServerInterfaceWrapper) GetEmployee(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "employeeID" -------------
	var employeeID int

	err = runtime.BindStyledParameter("simple", false, "employeeID", mux.Vars(r)["employeeID"], &employeeID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "employeeID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetEmployee(w, r, employeeID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteEmployee operation middleware
func (siw *ServerInterfaceWrapper) DeleteEmployee(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "employeeID" -------------
	var employeeID int

	err = runtime.BindStyledParameter("simple", false, "employeeID", mux.Vars(r)["employeeID"], &employeeID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "employeeID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteEmployee(w, r, employeeID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// EditEmployee operation middleware
func (siw *ServerInterfaceWrapper) EditEmployee(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "employeeID" -------------
	var employeeID int

	err = runtime.BindStyledParameter("simple", false, "employeeID", mux.Vars(r)["employeeID"], &employeeID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "employeeID", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.EditEmployee(w, r, employeeID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{})
}

type GorillaServerOptions struct {
	BaseURL          string
	BaseRouter       *mux.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r *mux.Router) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r *mux.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options GorillaServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = mux.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.HandleFunc(options.BaseURL+"/department/all", wrapper.GetDepartments).Methods("GET")

	r.HandleFunc(options.BaseURL+"/department/create", wrapper.CreateDepartment).Methods("POST")

	r.HandleFunc(options.BaseURL+"/department/{departmentID}", wrapper.GetDepartment).Methods("GET")

	r.HandleFunc(options.BaseURL+"/department/{departmentID}/delete", wrapper.DeleteDepartment).Methods("DELETE")

	r.HandleFunc(options.BaseURL+"/department/{departmentID}/edit", wrapper.EditDepartment).Methods("POST")

	r.HandleFunc(options.BaseURL+"/employee/all", wrapper.GetEmployees).Methods("GET")

	r.HandleFunc(options.BaseURL+"/employee/create", wrapper.CreateEmployee).Methods("POST")

	r.HandleFunc(options.BaseURL+"/employee/moveToDepartment", wrapper.MoveEmployeesToDepartment).Methods("POST")

	r.HandleFunc(options.BaseURL+"/employee/{employeeID}", wrapper.GetEmployee).Methods("GET")

	r.HandleFunc(options.BaseURL+"/employee/{employeeID}/delete", wrapper.DeleteEmployee).Methods("DELETE")

	r.HandleFunc(options.BaseURL+"/employee/{employeeID}/edit", wrapper.EditEmployee).Methods("POST")

	return r
}
